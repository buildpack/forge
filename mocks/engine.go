// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buildpack/forge (interfaces: Engine)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	engine "github.com/buildpack/forge/engine"
	reflect "reflect"
)

// MockEngine is a mock of Engine interface
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// NewContainer mocks base method
func (m *MockEngine) NewContainer(arg0 *engine.ContainerConfig) (engine.Container, error) {
	ret := m.ctrl.Call(m, "NewContainer", arg0)
	ret0, _ := ret[0].(engine.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewContainer indicates an expected call of NewContainer
func (mr *MockEngineMockRecorder) NewContainer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewContainer", reflect.TypeOf((*MockEngine)(nil).NewContainer), arg0)
}

// NewImage mocks base method
func (m *MockEngine) NewImage() engine.Image {
	ret := m.ctrl.Call(m, "NewImage")
	ret0, _ := ret[0].(engine.Image)
	return ret0
}

// NewImage indicates an expected call of NewImage
func (mr *MockEngineMockRecorder) NewImage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewImage", reflect.TypeOf((*MockEngine)(nil).NewImage))
}
