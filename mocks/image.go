// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sclevine/forge/engine (interfaces: Image)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	engine "github.com/sclevine/forge/engine"
	reflect "reflect"
)

// MockImage is a mock of Image interface
type MockImage struct {
	ctrl     *gomock.Controller
	recorder *MockImageMockRecorder
}

// MockImageMockRecorder is the mock recorder for MockImage
type MockImageMockRecorder struct {
	mock *MockImage
}

// NewMockImage creates a new mock instance
func NewMockImage(ctrl *gomock.Controller) *MockImage {
	mock := &MockImage{ctrl: ctrl}
	mock.recorder = &MockImageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImage) EXPECT() *MockImageMockRecorder {
	return m.recorder
}

// Build mocks base method
func (m *MockImage) Build(arg0 string, arg1 engine.Stream) <-chan engine.Progress {
	ret := m.ctrl.Call(m, "Build", arg0, arg1)
	ret0, _ := ret[0].(<-chan engine.Progress)
	return ret0
}

// Build indicates an expected call of Build
func (mr *MockImageMockRecorder) Build(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockImage)(nil).Build), arg0, arg1)
}

// Delete mocks base method
func (m *MockImage) Delete(arg0 string) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockImageMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockImage)(nil).Delete), arg0)
}

// Pull mocks base method
func (m *MockImage) Pull(arg0 string) <-chan engine.Progress {
	ret := m.ctrl.Call(m, "Pull", arg0)
	ret0, _ := ret[0].(<-chan engine.Progress)
	return ret0
}

// Pull indicates an expected call of Pull
func (mr *MockImageMockRecorder) Pull(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockImage)(nil).Pull), arg0)
}

// Push mocks base method
func (m *MockImage) Push(arg0 string, arg1 engine.RegistryCreds) <-chan engine.Progress {
	ret := m.ctrl.Call(m, "Push", arg0, arg1)
	ret0, _ := ret[0].(<-chan engine.Progress)
	return ret0
}

// Push indicates an expected call of Push
func (mr *MockImageMockRecorder) Push(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockImage)(nil).Push), arg0, arg1)
}
